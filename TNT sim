<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>tnt boom</title>
  <style>
    body { margin: 0; overflow: hidden; background: white; }
    #ui {
      position: fixed; top: 10px; left: 10px; background: rgba(255,255,255,0.9); padding: 10px;
      font-family: sans-serif; font-size: 14px; border-radius: 6px; box-shadow: 0 0 5px #ccc;
      z-index: 10;
    }
  </style>
</head>
<body>

<div id="ui">
  <label>explosion: <span id="strengthVal">250</span></label><br>
  <input id="strength" type="range" min="0" max="1000" step="1" value="250">
  <button id="test">ðŸ’¥ test</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
<script>
let scene, camera, renderer;
let tntBlocks = [], velocities = [];
let exploded = false;

const TNT_SIZE = 1.5;
const FLOOR_Y = 0;
const HEIGHT_OFFSET = 40;
const BASE_Y = 5 + HEIGHT_OFFSET;
const TOP_Y = BASE_Y + 2;
const BLOCKS_IN_ONE = 100
const ROWS = 20
const INITIAL_OFFSET = 1
const ROW_SPACING = 0.45

let strength = 250;
const strengthSlider = document.getElementById('strength');
const strengthVal = document.getElementById('strengthVal');
strengthSlider.oninput = () => {
  strength = parseFloat(strengthSlider.value);
  strengthVal.textContent = strength;
};

document.getElementById('test').onclick = () => {
  reset();
  spawnRandomTNTRows(ROWS, BLOCKS_IN_ONE);
  spawnExploder(true);
};

init();
spawnRandomTNTRows(ROWS, BLOCKS_IN_ONE);
spawnExploder(false);
animate();

function init() {
  scene = new THREE.Scene();
  scene.background = new THREE.Color('white');

  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.set(30, BASE_Y + 60, 80);
  camera.lookAt(0, BASE_Y, 0);

  renderer = new THREE.WebGLRenderer({antialias: true});
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  const light = new THREE.PointLight(0xffffff, 1);
  light.position.set(30, 60, 30);
  scene.add(light);
  scene.add(new THREE.AmbientLight(0x888888));

  const ground = new THREE.Mesh(
    new THREE.PlaneGeometry(100, 100),
    new THREE.MeshStandardMaterial({color: 0xdddddd})
  );
  ground.rotation.x = -Math.PI / 2;
  ground.position.y = FLOOR_Y;
  scene.add(ground);
}

function createBlock(x, y, z, color = 0xff4444) {
  const geo = new THREE.BoxGeometry(TNT_SIZE, TNT_SIZE, TNT_SIZE);
  const mat = new THREE.MeshStandardMaterial({color});
  const mesh = new THREE.Mesh(geo, mat);
  mesh.position.set(x, y, z);
  scene.add(mesh);
  return mesh;
}

function spawnRandomTNTRows(rows, blocksPerRow) {
  for (let row = 0; row < rows; row++) {
    let y = BASE_Y - row * ROW_SPACING;
    for (let i = 0; i < blocksPerRow; i++) {
      let angle = Math.random() * Math.PI * 2;
      let dx = Math.cos(angle) * INITIAL_OFFSET;
      let dz = Math.sin(angle) * INITIAL_OFFSET;
      let tnt = createBlock(dx, y, dz);
      velocities.push(new THREE.Vector3(0, 0, 0));
      tntBlocks.push(tnt);
    }
  }
}

function spawnExploder(auto = false) {
  let exploder = createBlock(0, TOP_Y, 0, 0xffff00);
  velocities.push(new THREE.Vector3(0, 0, 0));
  tntBlocks.push(exploder);

  setTimeout(() => {
    scene.remove(exploder);
    velocities.pop();
    tntBlocks.pop();
    explodeFrom(0, TOP_Y, 0);
    exploded = true;
  }, auto ? 100 : 4000);
}

function explodeFrom(cx, cy, cz) {
  const center = new THREE.Vector3(cx, cy, cz);
  for (let i = 0; i < tntBlocks.length; i++) {
    let block = tntBlocks[i];
    let dir = block.position.clone().sub(center);
    let dist = dir.length();

    if (dist === 0) continue;

    dir.normalize();

    let scale = 1 / (dist + 0.1); // falloff

    // XZ force Ã—25, Y force low
    let force = new THREE.Vector3(
      dir.x * strength * 0.25 * scale,
      dir.y * strength * 0.02 * scale,
      dir.z * strength * 0.25 * scale
    );

    velocities[i].add(force);
  }
}

function reset() {
  for (let b of tntBlocks) scene.remove(b);
  tntBlocks = [];
  velocities = [];
  exploded = false;
}

function animate() {
  requestAnimationFrame(animate);
  for (let i = 0; i < tntBlocks.length; i++) {
    if (!exploded) continue;
    let v = velocities[i];
    let b = tntBlocks[i];

    v.y -= 0.009;
    b.position.add(v);

    const half = TNT_SIZE / 2;
    if (b.position.y - half <= FLOOR_Y) {
      b.position.y = FLOOR_Y + half;
      v.set(0, 0, 0);
    }
  }
  renderer.render(scene, camera);
}
</script>
</body>
</html>
